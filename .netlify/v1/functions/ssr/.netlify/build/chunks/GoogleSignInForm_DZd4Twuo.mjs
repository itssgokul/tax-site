import { c as createComponent, a as renderTemplate, j as defineScriptVars, r as renderComponent, m as maybeRenderHead } from './astro/server_BQC3fY5D.mjs';
import 'kleur/colors';
import { a as $$Button } from './Layout_06QFzFFe.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$GoogleSignInForm = createComponent(async ($$result, $$props, $$slots) => {
  const GOOGLE_CLIENT_ID = "326276314056-r8isc8nr20tuqhsltbq3iqenb8fsm0ji.apps.googleusercontent.com";
  return renderTemplate(_a || (_a = __template(["", '<div id="auth-container" class="mx-auto max-w-md rounded-lg border border-slate-200 p-6 dark:border-slate-700">  <div id="sign-in-section"> <h2 class="mb-4 text-xl font-semibold">Sign in / Register</h2> <p class="mb-4 text-sm text-slate-600 dark:text-slate-400">\nPlease accept the terms and sign in with Google to proceed.\n</p> <div class="mb-4 flex items-center"> <input type="checkbox" id="terms-checkbox" class="mr-2 h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500"> <label for="terms-checkbox" class="text-sm text-slate-700 dark:text-slate-300">\nI accept the <a href="/terms" target="_blank" class="text-primary-600 hover:underline">Terms & Conditions</a> </label> </div> <div id="terms-error" class="mb-3 hidden text-sm text-red-500">\nPlease accept the Terms & Conditions.\n</div>  <div id="google-signin-button-container" class="mb-4 flex justify-center"> <div id="google-signin-loading" class="text-center"> <div class="inline-block h-6 w-6 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600"></div> <p class="mt-2 text-sm text-slate-500">Loading sign-in options...</p> </div> </div> <p class="text-xs text-slate-500 dark:text-slate-400">\nUses Google Sign in for secure authentication.\n</p> </div>  <div id="form-section" class="hidden"> <h2 class="mb-1 text-xl font-semibold">Welcome to One Point Tax!</h2> <p id="user-greeting" class="mb-4 text-sm text-slate-600 dark:text-slate-400">\nPlease provide a few more details.\n</p> <div id="form-message-area" role="alert" class="mb-4 hidden rounded-lg p-3 text-sm">  </div> <form id="user-data-form"> <div class="mb-4"> <label for="full-name" class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-300">Full Name</label> <input type="text" id="full-name" name="fullName" required class="w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:border-slate-600 dark:bg-slate-800"> </div> <div class="mb-4"> <label for="phone-number" class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-300">Phone Number</label> <input type="tel" id="phone-number" name="phoneNumber" required class="w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:border-slate-600 dark:bg-slate-800"> </div> <div class="mb-4"> <label for="service-interest" class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-300">Service Interested In</label> <select id="service-interest" name="serviceInterest" required class="w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:border-slate-600 dark:bg-slate-800"> <option value="" disabled selected>Select a service...</option> <option value="tax-prep">Tax Filing/Preparation</option> <option value="GST">GST Services</option> <option value="bookkeeping">Bookkeeping</option> <option value="consulting">Consulting</option>  </select> </div> ', ` </form> </div>  <div id="confirmation-section" class="hidden"> <h2 class="mb-2 text-xl font-semibold text-green-600 dark:text-green-400">Thank You!</h2> <p class="text-slate-700 dark:text-slate-300">
We've received your information and will get in touch soon.
</p> </div> </div> <script>(function(){`, "\n	console.log('GoogleSignInForm script started.')\n\n	// --- Global variables ---\n	let currentGoogleIdToken = null\n	let isSubmitting = false\n	let isGoogleInitialized = false\n	let initAttempts = 0\n	const MAX_INIT_ATTEMPTS = 5\n\n	// --- Helper Function to Display Messages ---\n	function displayMessage(type, message) {\n		const formMessageArea = document.getElementById('form-message-area')\n		if (!formMessageArea) return\n		formMessageArea.textContent = message\n		let classes = 'mb-4 rounded-lg p-3 text-sm'\n		switch (type) {\n			case 'error':\n				classes += ' bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300'\n				break\n			case 'info':\n				classes += ' bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300'\n				break\n			case 'warning':\n				classes += ' bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300'\n				break\n			case 'clear':\n				classes += ' hidden'\n				formMessageArea.textContent = ''\n				break\n			default:\n				classes += ' hidden'\n				formMessageArea.textContent = ''\n		}\n		formMessageArea.className = classes\n	}\n\n	// --- Google Sign-In Initialization & Render ---\n	function initAndRenderGoogleButton() {\n		console.log(`Attempting initAndRenderGoogleButton... (Attempt ${++initAttempts})`)\n\n		const buttonContainer = document.getElementById('google-signin-button-container')\n		const loadingElement = document.getElementById('google-signin-loading')\n\n		if (!buttonContainer) {\n			console.error('Google button container not found.')\n			return\n		}\n\n		if (!GOOGLE_CLIENT_ID) {\n			console.error('GOOGLE_CLIENT_ID is missing!')\n			buttonContainer.innerHTML =\n				'<p class=\"text-red-500 text-xs\">Configuration Error: Missing Client ID.</p>'\n			return\n		}\n\n		// Check if Google library is ready\n		if (typeof google === 'undefined' || !google.accounts || !google.accounts.id) {\n			console.log('Google library not ready yet. Will retry...')\n\n			// If we've already tried too many times, show error\n			if (initAttempts >= MAX_INIT_ATTEMPTS) {\n				console.error('Max initialization attempts reached.')\n				if (loadingElement)\n					loadingElement.innerHTML =\n						'<p class=\"text-red-500 text-xs\">Error loading Google Sign-In. Please refresh the page.</p>'\n				return\n			}\n\n			// Try again in a moment\n			setTimeout(initAndRenderGoogleButton, 500)\n			return\n		}\n\n		try {\n			// Initialize Google library\n			google.accounts.id.initialize({\n				client_id: GOOGLE_CLIENT_ID,\n				callback: handleCredentialResponse\n			})\n			isGoogleInitialized = true\n			console.log('Google Accounts ID initialized successfully.')\n\n			// Clear container and remove loading indicator\n			if (loadingElement) {\n				loadingElement.remove()\n			}\n\n			// Render the button\n			google.accounts.id.renderButton(buttonContainer, {\n				theme: 'outline',\n				size: 'large',\n				type: 'standard',\n				shape: 'rectangular',\n				width: buttonContainer.offsetWidth\n			})\n			console.log('Google button rendered successfully.')\n\n			// Reset initialization attempts counter\n			initAttempts = 0\n		} catch (error) {\n			console.error('Error during Google Sign-In setup/render:', error)\n			buttonContainer.innerHTML =\n				'<p class=\"text-red-500 text-xs\">Error setting up Google Sign-In. Please refresh the page.</p>'\n		}\n	}\n\n	// --- Callback for Google Sign-In Success ---\n	function handleCredentialResponse(response) {\n		console.log('Encoded JWT ID token received.')\n		currentGoogleIdToken = response.credential\n\n		const termsCheckbox = document.getElementById('terms-checkbox')\n		const termsError = document.getElementById('terms-error')\n		const userGreeting = document.getElementById('user-greeting')\n		const signInSection = document.getElementById('sign-in-section')\n		const formSection = document.getElementById('form-section')\n		const confirmationSection = document.getElementById('confirmation-section')\n\n		if (!(termsCheckbox instanceof HTMLInputElement) || !termsCheckbox.checked) {\n			if (termsError) termsError.classList.remove('hidden')\n			if (termsCheckbox instanceof HTMLInputElement) termsCheckbox.focus()\n			displayMessage('error', 'Please accept the Terms & Conditions before signing in.')\n			return\n		} else {\n			if (termsError) termsError.classList.add('hidden')\n		}\n\n		// Decode JWT (optional, for display)\n		try {\n			// @ts-ignore\n			if (typeof jwt_decode === 'function') {\n				// @ts-ignore\n				const decoded = jwt_decode(response.credential)\n				console.log('Decoded JWT:', decoded)\n				const name = decoded?.name\n				const email = decoded?.email\n				if (userGreeting && name) {\n					userGreeting.textContent = `Hi ${name}! Please provide a few more details.`\n				} else if (userGreeting && email) {\n					userGreeting.textContent = `Hi ${email}! Please provide a few more details.`\n				} else if (userGreeting) {\n					userGreeting.textContent = `Please provide a few more details.`\n				}\n			} else {\n				console.warn('jwt-decode function not found.')\n				if (userGreeting) userGreeting.textContent = `Please provide a few more details.`\n			}\n		} catch (error) {\n			console.error('Error decoding JWT:', error)\n			if (userGreeting) userGreeting.textContent = `Please provide a few more details.`\n		}\n\n		// Update UI\n		if (signInSection) signInSection.classList.add('hidden')\n		if (formSection) formSection.classList.remove('hidden')\n		if (confirmationSection) confirmationSection.classList.add('hidden')\n	}\n\n	// --- Form Submission Handler ---\n	async function handleFormSubmit(event) {\n		event.preventDefault()\n		if (isSubmitting) return\n		isSubmitting = true\n\n		const userDataForm = document.getElementById('user-data-form')\n		const formSection = document.getElementById('form-section')\n		const confirmationSection = document.getElementById('confirmation-section')\n		const submitButton = userDataForm?.querySelector('button[type=\"submit\"]')\n\n		if (submitButton instanceof HTMLButtonElement) {\n			submitButton.disabled = true\n			submitButton.textContent = 'Submitting...'\n		}\n		displayMessage('clear', '')\n\n		if (!currentGoogleIdToken) {\n			console.error('Google ID token is missing.')\n			displayMessage('error', 'Authentication error. Please try signing in again.')\n			if (submitButton instanceof HTMLButtonElement) {\n				submitButton.disabled = false\n				submitButton.textContent = 'Submit Information'\n			}\n			isSubmitting = false\n			return\n		}\n\n		const formData = new FormData(userDataForm)\n		const formDataObject = Object.fromEntries(formData.entries())\n		console.log('Form Data Submitted:', formDataObject)\n\n		try {\n			const apiResponse = await fetch('/api/submit-contact', {\n				method: 'POST',\n				headers: { 'Content-Type': 'application/json' },\n				body: JSON.stringify({\n					formData: formDataObject,\n					googleToken: currentGoogleIdToken\n				})\n			})\n\n			const result = await apiResponse.json()\n			console.log('API Response:', result)\n\n			if (!apiResponse.ok) {\n				throw new Error(result.message || `API Error: ${apiResponse.statusText}`)\n			}\n\n			if (result.status === 'exists') {\n				displayMessage('info', result.message || 'You are already registered.')\n				if (submitButton instanceof HTMLButtonElement) {\n					submitButton.disabled = false\n					submitButton.textContent = 'Submit Information'\n				}\n				isSubmitting = false\n			} else if (result.status === 'success') {\n				displayMessage('clear', '')\n				if (formSection) formSection.classList.add('hidden')\n				if (confirmationSection) confirmationSection.classList.remove('hidden')\n				// isSubmitting remains true as form is hidden\n			} else {\n				// Handle unexpected success status\n				console.warn('Received unexpected success status from API:', result.status)\n				displayMessage(\n					'warning',\n					`Submission received, but with an unexpected status: ${result.status}`\n				)\n				if (submitButton instanceof HTMLButtonElement) {\n					submitButton.disabled = false\n					submitButton.textContent = 'Submit Information'\n				}\n				isSubmitting = false\n			}\n		} catch (error) {\n			console.error('Error submitting form data:', error)\n			displayMessage(\n				'error',\n				`There was an error submitting your information: ${error.message || 'Please try again.'}`\n			)\n			if (submitButton instanceof HTMLButtonElement) {\n				submitButton.disabled = false\n				submitButton.textContent = 'Submit Information'\n			}\n			isSubmitting = false\n		}\n	} // End of async submit handler\n\n	// --- Terms Checkbox Handler ---\n	function handleTermsChange() {\n		const currentTermsCheckbox = document.getElementById('terms-checkbox')\n		const currentTermsError = document.getElementById('terms-error')\n		if (\n			currentTermsCheckbox instanceof HTMLInputElement &&\n			currentTermsCheckbox.checked &&\n			currentTermsError\n		) {\n			currentTermsError.classList.add('hidden')\n		}\n	}\n\n	// --- Event Listener Setup Function ---\n	function setupEventListeners() {\n		const currentDataForm = document.getElementById('user-data-form')\n		const currentTermsCheckbox = document.getElementById('terms-checkbox')\n\n		if (currentDataForm instanceof HTMLFormElement) {\n			currentDataForm.removeEventListener('submit', handleFormSubmit) // Prevent duplicates\n			currentDataForm.addEventListener('submit', handleFormSubmit)\n			console.log('Form submit listener attached.')\n		} else {\n			console.warn('User data form not found when attaching listener.')\n		}\n\n		if (currentTermsCheckbox) {\n			currentTermsCheckbox.removeEventListener('change', handleTermsChange) // Prevent duplicates\n			currentTermsCheckbox.addEventListener('change', handleTermsChange)\n			console.log('Terms listener attached.')\n		} else {\n			console.warn('Terms checkbox not found when attaching listener.')\n		}\n	}\n\n	// --- Main Setup Function ---\n	function runSetup() {\n		console.log('Running setup for GoogleSignInForm...')\n		setupEventListeners()\n\n		// Initialize Google Sign-In when the API is loaded\n		// This will be triggered by the custom event from the Sign In page\n		if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {\n			console.log('Google API already available, initializing button...')\n			initAndRenderGoogleButton()\n		} else {\n			console.log('Waiting for Google API to load...')\n			document.addEventListener('google-api-loaded', initAndRenderGoogleButton)\n		}\n	}\n\n	// Run on both initial load and after view transitions\n	document.addEventListener('DOMContentLoaded', runSetup)\n	document.addEventListener('astro:page-load', runSetup)\n	document.addEventListener('astro:after-swap', runSetup)\n})();</script>"], ["", '<div id="auth-container" class="mx-auto max-w-md rounded-lg border border-slate-200 p-6 dark:border-slate-700">  <div id="sign-in-section"> <h2 class="mb-4 text-xl font-semibold">Sign in / Register</h2> <p class="mb-4 text-sm text-slate-600 dark:text-slate-400">\nPlease accept the terms and sign in with Google to proceed.\n</p> <div class="mb-4 flex items-center"> <input type="checkbox" id="terms-checkbox" class="mr-2 h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500"> <label for="terms-checkbox" class="text-sm text-slate-700 dark:text-slate-300">\nI accept the <a href="/terms" target="_blank" class="text-primary-600 hover:underline">Terms & Conditions</a> </label> </div> <div id="terms-error" class="mb-3 hidden text-sm text-red-500">\nPlease accept the Terms & Conditions.\n</div>  <div id="google-signin-button-container" class="mb-4 flex justify-center"> <div id="google-signin-loading" class="text-center"> <div class="inline-block h-6 w-6 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600"></div> <p class="mt-2 text-sm text-slate-500">Loading sign-in options...</p> </div> </div> <p class="text-xs text-slate-500 dark:text-slate-400">\nUses Google Sign in for secure authentication.\n</p> </div>  <div id="form-section" class="hidden"> <h2 class="mb-1 text-xl font-semibold">Welcome to One Point Tax!</h2> <p id="user-greeting" class="mb-4 text-sm text-slate-600 dark:text-slate-400">\nPlease provide a few more details.\n</p> <div id="form-message-area" role="alert" class="mb-4 hidden rounded-lg p-3 text-sm">  </div> <form id="user-data-form"> <div class="mb-4"> <label for="full-name" class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-300">Full Name</label> <input type="text" id="full-name" name="fullName" required class="w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:border-slate-600 dark:bg-slate-800"> </div> <div class="mb-4"> <label for="phone-number" class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-300">Phone Number</label> <input type="tel" id="phone-number" name="phoneNumber" required class="w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:border-slate-600 dark:bg-slate-800"> </div> <div class="mb-4"> <label for="service-interest" class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-300">Service Interested In</label> <select id="service-interest" name="serviceInterest" required class="w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:border-slate-600 dark:bg-slate-800"> <option value="" disabled selected>Select a service...</option> <option value="tax-prep">Tax Filing/Preparation</option> <option value="GST">GST Services</option> <option value="bookkeeping">Bookkeeping</option> <option value="consulting">Consulting</option>  </select> </div> ', ` </form> </div>  <div id="confirmation-section" class="hidden"> <h2 class="mb-2 text-xl font-semibold text-green-600 dark:text-green-400">Thank You!</h2> <p class="text-slate-700 dark:text-slate-300">
We've received your information and will get in touch soon.
</p> </div> </div> <script>(function(){`, "\n	console.log('GoogleSignInForm script started.')\n\n	// --- Global variables ---\n	let currentGoogleIdToken = null\n	let isSubmitting = false\n	let isGoogleInitialized = false\n	let initAttempts = 0\n	const MAX_INIT_ATTEMPTS = 5\n\n	// --- Helper Function to Display Messages ---\n	function displayMessage(type, message) {\n		const formMessageArea = document.getElementById('form-message-area')\n		if (!formMessageArea) return\n		formMessageArea.textContent = message\n		let classes = 'mb-4 rounded-lg p-3 text-sm'\n		switch (type) {\n			case 'error':\n				classes += ' bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300'\n				break\n			case 'info':\n				classes += ' bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300'\n				break\n			case 'warning':\n				classes += ' bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300'\n				break\n			case 'clear':\n				classes += ' hidden'\n				formMessageArea.textContent = ''\n				break\n			default:\n				classes += ' hidden'\n				formMessageArea.textContent = ''\n		}\n		formMessageArea.className = classes\n	}\n\n	// --- Google Sign-In Initialization & Render ---\n	function initAndRenderGoogleButton() {\n		console.log(\\`Attempting initAndRenderGoogleButton... (Attempt \\${++initAttempts})\\`)\n\n		const buttonContainer = document.getElementById('google-signin-button-container')\n		const loadingElement = document.getElementById('google-signin-loading')\n\n		if (!buttonContainer) {\n			console.error('Google button container not found.')\n			return\n		}\n\n		if (!GOOGLE_CLIENT_ID) {\n			console.error('GOOGLE_CLIENT_ID is missing!')\n			buttonContainer.innerHTML =\n				'<p class=\"text-red-500 text-xs\">Configuration Error: Missing Client ID.</p>'\n			return\n		}\n\n		// Check if Google library is ready\n		if (typeof google === 'undefined' || !google.accounts || !google.accounts.id) {\n			console.log('Google library not ready yet. Will retry...')\n\n			// If we've already tried too many times, show error\n			if (initAttempts >= MAX_INIT_ATTEMPTS) {\n				console.error('Max initialization attempts reached.')\n				if (loadingElement)\n					loadingElement.innerHTML =\n						'<p class=\"text-red-500 text-xs\">Error loading Google Sign-In. Please refresh the page.</p>'\n				return\n			}\n\n			// Try again in a moment\n			setTimeout(initAndRenderGoogleButton, 500)\n			return\n		}\n\n		try {\n			// Initialize Google library\n			google.accounts.id.initialize({\n				client_id: GOOGLE_CLIENT_ID,\n				callback: handleCredentialResponse\n			})\n			isGoogleInitialized = true\n			console.log('Google Accounts ID initialized successfully.')\n\n			// Clear container and remove loading indicator\n			if (loadingElement) {\n				loadingElement.remove()\n			}\n\n			// Render the button\n			google.accounts.id.renderButton(buttonContainer, {\n				theme: 'outline',\n				size: 'large',\n				type: 'standard',\n				shape: 'rectangular',\n				width: buttonContainer.offsetWidth\n			})\n			console.log('Google button rendered successfully.')\n\n			// Reset initialization attempts counter\n			initAttempts = 0\n		} catch (error) {\n			console.error('Error during Google Sign-In setup/render:', error)\n			buttonContainer.innerHTML =\n				'<p class=\"text-red-500 text-xs\">Error setting up Google Sign-In. Please refresh the page.</p>'\n		}\n	}\n\n	// --- Callback for Google Sign-In Success ---\n	function handleCredentialResponse(response) {\n		console.log('Encoded JWT ID token received.')\n		currentGoogleIdToken = response.credential\n\n		const termsCheckbox = document.getElementById('terms-checkbox')\n		const termsError = document.getElementById('terms-error')\n		const userGreeting = document.getElementById('user-greeting')\n		const signInSection = document.getElementById('sign-in-section')\n		const formSection = document.getElementById('form-section')\n		const confirmationSection = document.getElementById('confirmation-section')\n\n		if (!(termsCheckbox instanceof HTMLInputElement) || !termsCheckbox.checked) {\n			if (termsError) termsError.classList.remove('hidden')\n			if (termsCheckbox instanceof HTMLInputElement) termsCheckbox.focus()\n			displayMessage('error', 'Please accept the Terms & Conditions before signing in.')\n			return\n		} else {\n			if (termsError) termsError.classList.add('hidden')\n		}\n\n		// Decode JWT (optional, for display)\n		try {\n			// @ts-ignore\n			if (typeof jwt_decode === 'function') {\n				// @ts-ignore\n				const decoded = jwt_decode(response.credential)\n				console.log('Decoded JWT:', decoded)\n				const name = decoded?.name\n				const email = decoded?.email\n				if (userGreeting && name) {\n					userGreeting.textContent = \\`Hi \\${name}! Please provide a few more details.\\`\n				} else if (userGreeting && email) {\n					userGreeting.textContent = \\`Hi \\${email}! Please provide a few more details.\\`\n				} else if (userGreeting) {\n					userGreeting.textContent = \\`Please provide a few more details.\\`\n				}\n			} else {\n				console.warn('jwt-decode function not found.')\n				if (userGreeting) userGreeting.textContent = \\`Please provide a few more details.\\`\n			}\n		} catch (error) {\n			console.error('Error decoding JWT:', error)\n			if (userGreeting) userGreeting.textContent = \\`Please provide a few more details.\\`\n		}\n\n		// Update UI\n		if (signInSection) signInSection.classList.add('hidden')\n		if (formSection) formSection.classList.remove('hidden')\n		if (confirmationSection) confirmationSection.classList.add('hidden')\n	}\n\n	// --- Form Submission Handler ---\n	async function handleFormSubmit(event) {\n		event.preventDefault()\n		if (isSubmitting) return\n		isSubmitting = true\n\n		const userDataForm = document.getElementById('user-data-form')\n		const formSection = document.getElementById('form-section')\n		const confirmationSection = document.getElementById('confirmation-section')\n		const submitButton = userDataForm?.querySelector('button[type=\"submit\"]')\n\n		if (submitButton instanceof HTMLButtonElement) {\n			submitButton.disabled = true\n			submitButton.textContent = 'Submitting...'\n		}\n		displayMessage('clear', '')\n\n		if (!currentGoogleIdToken) {\n			console.error('Google ID token is missing.')\n			displayMessage('error', 'Authentication error. Please try signing in again.')\n			if (submitButton instanceof HTMLButtonElement) {\n				submitButton.disabled = false\n				submitButton.textContent = 'Submit Information'\n			}\n			isSubmitting = false\n			return\n		}\n\n		const formData = new FormData(userDataForm)\n		const formDataObject = Object.fromEntries(formData.entries())\n		console.log('Form Data Submitted:', formDataObject)\n\n		try {\n			const apiResponse = await fetch('/api/submit-contact', {\n				method: 'POST',\n				headers: { 'Content-Type': 'application/json' },\n				body: JSON.stringify({\n					formData: formDataObject,\n					googleToken: currentGoogleIdToken\n				})\n			})\n\n			const result = await apiResponse.json()\n			console.log('API Response:', result)\n\n			if (!apiResponse.ok) {\n				throw new Error(result.message || \\`API Error: \\${apiResponse.statusText}\\`)\n			}\n\n			if (result.status === 'exists') {\n				displayMessage('info', result.message || 'You are already registered.')\n				if (submitButton instanceof HTMLButtonElement) {\n					submitButton.disabled = false\n					submitButton.textContent = 'Submit Information'\n				}\n				isSubmitting = false\n			} else if (result.status === 'success') {\n				displayMessage('clear', '')\n				if (formSection) formSection.classList.add('hidden')\n				if (confirmationSection) confirmationSection.classList.remove('hidden')\n				// isSubmitting remains true as form is hidden\n			} else {\n				// Handle unexpected success status\n				console.warn('Received unexpected success status from API:', result.status)\n				displayMessage(\n					'warning',\n					\\`Submission received, but with an unexpected status: \\${result.status}\\`\n				)\n				if (submitButton instanceof HTMLButtonElement) {\n					submitButton.disabled = false\n					submitButton.textContent = 'Submit Information'\n				}\n				isSubmitting = false\n			}\n		} catch (error) {\n			console.error('Error submitting form data:', error)\n			displayMessage(\n				'error',\n				\\`There was an error submitting your information: \\${error.message || 'Please try again.'}\\`\n			)\n			if (submitButton instanceof HTMLButtonElement) {\n				submitButton.disabled = false\n				submitButton.textContent = 'Submit Information'\n			}\n			isSubmitting = false\n		}\n	} // End of async submit handler\n\n	// --- Terms Checkbox Handler ---\n	function handleTermsChange() {\n		const currentTermsCheckbox = document.getElementById('terms-checkbox')\n		const currentTermsError = document.getElementById('terms-error')\n		if (\n			currentTermsCheckbox instanceof HTMLInputElement &&\n			currentTermsCheckbox.checked &&\n			currentTermsError\n		) {\n			currentTermsError.classList.add('hidden')\n		}\n	}\n\n	// --- Event Listener Setup Function ---\n	function setupEventListeners() {\n		const currentDataForm = document.getElementById('user-data-form')\n		const currentTermsCheckbox = document.getElementById('terms-checkbox')\n\n		if (currentDataForm instanceof HTMLFormElement) {\n			currentDataForm.removeEventListener('submit', handleFormSubmit) // Prevent duplicates\n			currentDataForm.addEventListener('submit', handleFormSubmit)\n			console.log('Form submit listener attached.')\n		} else {\n			console.warn('User data form not found when attaching listener.')\n		}\n\n		if (currentTermsCheckbox) {\n			currentTermsCheckbox.removeEventListener('change', handleTermsChange) // Prevent duplicates\n			currentTermsCheckbox.addEventListener('change', handleTermsChange)\n			console.log('Terms listener attached.')\n		} else {\n			console.warn('Terms checkbox not found when attaching listener.')\n		}\n	}\n\n	// --- Main Setup Function ---\n	function runSetup() {\n		console.log('Running setup for GoogleSignInForm...')\n		setupEventListeners()\n\n		// Initialize Google Sign-In when the API is loaded\n		// This will be triggered by the custom event from the Sign In page\n		if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {\n			console.log('Google API already available, initializing button...')\n			initAndRenderGoogleButton()\n		} else {\n			console.log('Waiting for Google API to load...')\n			document.addEventListener('google-api-loaded', initAndRenderGoogleButton)\n		}\n	}\n\n	// Run on both initial load and after view transitions\n	document.addEventListener('DOMContentLoaded', runSetup)\n	document.addEventListener('astro:page-load', runSetup)\n	document.addEventListener('astro:after-swap', runSetup)\n})();</script>"])), maybeRenderHead(), renderComponent($$result, "Button", $$Button, { "type": "submit", "style": "primary", "classes": "w-full" }, { "default": async ($$result2) => renderTemplate`Submit Information` }), defineScriptVars({ GOOGLE_CLIENT_ID }));
}, "D:/tax-site/src/components/auth/GoogleSignInForm.astro", void 0);

export { $$GoogleSignInForm as $ };
