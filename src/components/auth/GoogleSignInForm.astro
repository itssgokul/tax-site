---
// src/components/auth/GoogleSignInForm.astro
import Button from '../ui/Button.astro'
// Removed Icon import as custom button is removed

// Get Client ID from environment variables
const GOOGLE_CLIENT_ID = import.meta.env.PUBLIC_GOOGLE_CLIENT_ID

interface DecodedToken {
	email?: string
	name?: string
	picture?: string
}
---

<div
	id="auth-container"
	class="mx-auto max-w-md rounded-lg border border-slate-200 p-6 dark:border-slate-700"
>
	{/* Stage 1: Sign-In Prompt */}
	<div id="sign-in-section">
		<h2 class="mb-4 text-xl font-semibold">Sign in / Register</h2>
		<p class="mb-4 text-sm text-slate-600 dark:text-slate-400">
			Please accept the terms and sign in with Google to proceed.
		</p>
		<div class="mb-4 flex items-center">
			<input
				type="checkbox"
				id="terms-checkbox"
				class="mr-2 h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500"
			/>
			<label for="terms-checkbox" class="text-sm text-slate-700 dark:text-slate-300">
				I accept the <a
					href="/legal/terms"
					target="_blank"
					class="text-primary-600 hover:underline">Terms</a
				>
			</label>
		</div>
		<div id="terms-error" class="mb-3 hidden text-sm text-red-500">
			Please accept the Terms & Conditions.
		</div>
		{/* Add loading indicator and container for Google button */}
		<div id="google-signin-button-container" class="mb-4 flex justify-center">
			<div id="google-signin-loading" class="text-center">
				<div
					class="inline-block h-6 w-6 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600"
				>
				</div>
				<p class="mt-2 text-sm text-slate-500">Loading sign-in options...</p>
			</div>
		</div>
		<p class="text-xs text-slate-500 dark:text-slate-400">
			Uses Google Sign in for secure authentication.
		</p>
	</div>

	{/* Stage 2: Data Collection Form (Initially Hidden) */}
	<div id="form-section" class="hidden">
		<h2 class="mb-1 text-xl font-semibold">Welcome to One Point Tax!</h2>
		<p id="user-greeting" class="mb-4 text-sm text-slate-600 dark:text-slate-400">
			Please provide a few more details.
		</p>
		<div id="form-message-area" role="alert" class="mb-4 hidden rounded-lg p-3 text-sm">
			{/* Message content will be set by script */}
		</div>
		<form id="user-data-form">
			<div class="mb-4">
				<label
					for="full-name"
					class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-300"
					>Full Name</label
				>
				<input
					type="text"
					id="full-name"
					name="fullName"
					required
					class="w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:border-slate-600 dark:bg-slate-800"
				/>
			</div>
			<div class="mb-4">
				<label
					for="phone-number"
					class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-300"
					>Phone Number</label
				>
				<input
					type="tel"
					id="phone-number"
					name="phoneNumber"
					required
					class="w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:border-slate-600 dark:bg-slate-800"
				/>
			</div>
			<div class="mb-4">
				<label
					for="service-interest"
					class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-300"
					>Service Interested In</label
				>
				<select
					id="service-interest"
					name="serviceInterest"
					required
					class="w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:border-slate-600 dark:bg-slate-800"
				>
					<option value="" disabled selected>Select a service...</option>
					<option value="tax-prep">Tax Filing/Preparation</option>
					<option value="GST">GST Services</option>
					<option value="bookkeeping">Bookkeeping</option>
					<option value="consulting">Consulting</option>
					{/* Add other services */}
				</select>
			</div>
			<Button type="submit" style="primary" classes="w-full">Submit Information</Button>
		</form>
	</div>

	{/* Stage 3: Confirmation Message (Initially Hidden) */}
	<div id="confirmation-section" class="hidden">
		<h2 class="mb-2 text-xl font-semibold text-green-600 dark:text-green-400">Thank You!</h2>
		<p class="text-slate-700 dark:text-slate-300">
			We've received your information and will get in touch soon.
		</p>
	</div>
</div>

<script define:vars={{ GOOGLE_CLIENT_ID }}>
	console.log('GoogleSignInForm script started.')

	// --- Global variables ---
	let currentGoogleIdToken = null
	let isSubmitting = false
	let isGoogleInitialized = false
	let initAttempts = 0
	const MAX_INIT_ATTEMPTS = 5

	// --- Helper Function to Display Messages ---
	function displayMessage(type, message) {
		const formMessageArea = document.getElementById('form-message-area')
		if (!formMessageArea) return
		formMessageArea.textContent = message
		let classes = 'mb-4 rounded-lg p-3 text-sm'
		switch (type) {
			case 'error':
				classes += ' bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300'
				break
			case 'info':
				classes += ' bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300'
				break
			case 'warning':
				classes += ' bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300'
				break
			case 'clear':
				classes += ' hidden'
				formMessageArea.textContent = ''
				break
			default:
				classes += ' hidden'
				formMessageArea.textContent = ''
		}
		formMessageArea.className = classes
	}

	// --- Google Sign-In Initialization & Render ---
	function initAndRenderGoogleButton() {
		console.log(`Attempting initAndRenderGoogleButton... (Attempt ${++initAttempts})`)

		const buttonContainer = document.getElementById('google-signin-button-container')
		const loadingElement = document.getElementById('google-signin-loading')

		if (!buttonContainer) {
			console.error('Google button container not found.')
			return
		}

		if (!GOOGLE_CLIENT_ID) {
			console.error('GOOGLE_CLIENT_ID is missing!')
			buttonContainer.innerHTML =
				'<p class="text-red-500 text-xs">Configuration Error: Missing Client ID.</p>'
			return
		}

		// Check if Google library is ready
		if (typeof google === 'undefined' || !google.accounts || !google.accounts.id) {
			console.log('Google library not ready yet. Will retry...')

			// If we've already tried too many times, show error
			if (initAttempts >= MAX_INIT_ATTEMPTS) {
				console.error('Max initialization attempts reached.')
				if (loadingElement)
					loadingElement.innerHTML =
						'<p class="text-red-500 text-xs">Error loading Google Sign-In. Please refresh the page.</p>'
				return
			}

			// Try again in a moment
			setTimeout(initAndRenderGoogleButton, 500)
			return
		}

		try {
			// Initialize Google library
			google.accounts.id.initialize({
				client_id: GOOGLE_CLIENT_ID,
				callback: handleCredentialResponse
			})
			isGoogleInitialized = true
			console.log('Google Accounts ID initialized successfully.')

			// Clear container and remove loading indicator
			if (loadingElement) {
				loadingElement.remove()
			}

			// Render the button
			google.accounts.id.renderButton(buttonContainer, {
				theme: 'outline',
				size: 'large',
				type: 'standard',
				shape: 'rectangular',
				width: buttonContainer.offsetWidth
			})
			console.log('Google button rendered successfully.')

			// Reset initialization attempts counter
			initAttempts = 0
		} catch (error) {
			console.error('Error during Google Sign-In setup/render:', error)
			buttonContainer.innerHTML =
				'<p class="text-red-500 text-xs">Error setting up Google Sign-In. Please refresh the page.</p>'
		}
	}

	// --- Callback for Google Sign-In Success ---
	function handleCredentialResponse(response) {
		console.log('Encoded JWT ID token received.')
		currentGoogleIdToken = response.credential

		const termsCheckbox = document.getElementById('terms-checkbox')
		const termsError = document.getElementById('terms-error')
		const userGreeting = document.getElementById('user-greeting')
		const signInSection = document.getElementById('sign-in-section')
		const formSection = document.getElementById('form-section')
		const confirmationSection = document.getElementById('confirmation-section')

		if (!(termsCheckbox instanceof HTMLInputElement) || !termsCheckbox.checked) {
			if (termsError) termsError.classList.remove('hidden')
			if (termsCheckbox instanceof HTMLInputElement) termsCheckbox.focus()
			displayMessage('error', 'Please accept the Terms & Conditions before signing in.')
			return
		} else {
			if (termsError) termsError.classList.add('hidden')
		}

		// Decode JWT (optional, for display)
		try {
			// @ts-ignore
			if (typeof jwt_decode === 'function') {
				// @ts-ignore
				const decoded = jwt_decode(response.credential)
				console.log('Decoded JWT:', decoded)
				const name = decoded?.name
				const email = decoded?.email
				if (userGreeting && name) {
					userGreeting.textContent = `Hi ${name}! Please provide a few more details.`
				} else if (userGreeting && email) {
					userGreeting.textContent = `Hi ${email}! Please provide a few more details.`
				} else if (userGreeting) {
					userGreeting.textContent = `Please provide a few more details.`
				}
			} else {
				console.warn('jwt-decode function not found.')
				if (userGreeting) userGreeting.textContent = `Please provide a few more details.`
			}
		} catch (error) {
			console.error('Error decoding JWT:', error)
			if (userGreeting) userGreeting.textContent = `Please provide a few more details.`
		}

		// Update UI
		if (signInSection) signInSection.classList.add('hidden')
		if (formSection) formSection.classList.remove('hidden')
		if (confirmationSection) confirmationSection.classList.add('hidden')
	}

	// --- Form Submission Handler ---
	async function handleFormSubmit(event) {
		event.preventDefault()
		if (isSubmitting) return
		isSubmitting = true

		const userDataForm = document.getElementById('user-data-form')
		const formSection = document.getElementById('form-section')
		const confirmationSection = document.getElementById('confirmation-section')
		const submitButton = userDataForm?.querySelector('button[type="submit"]')

		if (submitButton instanceof HTMLButtonElement) {
			submitButton.disabled = true
			submitButton.textContent = 'Submitting...'
		}
		displayMessage('clear', '')

		if (!currentGoogleIdToken) {
			console.error('Google ID token is missing.')
			displayMessage('error', 'Authentication error. Please try signing in again.')
			if (submitButton instanceof HTMLButtonElement) {
				submitButton.disabled = false
				submitButton.textContent = 'Submit Information'
			}
			isSubmitting = false
			return
		}

		const formData = new FormData(userDataForm)
		const formDataObject = Object.fromEntries(formData.entries())
		console.log('Form Data Submitted:', formDataObject)

		try {
			const apiResponse = await fetch('/api/submit-contact', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({
					formData: formDataObject,
					googleToken: currentGoogleIdToken
				})
			})

			const result = await apiResponse.json()
			console.log('API Response:', result)

			if (!apiResponse.ok) {
				throw new Error(result.message || `API Error: ${apiResponse.statusText}`)
			}

			if (result.status === 'exists') {
				displayMessage('info', result.message || 'You are already registered.')
				if (submitButton instanceof HTMLButtonElement) {
					submitButton.disabled = false
					submitButton.textContent = 'Submit Information'
				}
				isSubmitting = false
			} else if (result.status === 'success') {
				displayMessage('clear', '')
				if (formSection) formSection.classList.add('hidden')
				if (confirmationSection) confirmationSection.classList.remove('hidden')
				// isSubmitting remains true as form is hidden
			} else {
				// Handle unexpected success status
				console.warn('Received unexpected success status from API:', result.status)
				displayMessage(
					'warning',
					`Submission received, but with an unexpected status: ${result.status}`
				)
				if (submitButton instanceof HTMLButtonElement) {
					submitButton.disabled = false
					submitButton.textContent = 'Submit Information'
				}
				isSubmitting = false
			}
		} catch (error) {
			console.error('Error submitting form data:', error)
			displayMessage(
				'error',
				`There was an error submitting your information: ${error.message || 'Please try again.'}`
			)
			if (submitButton instanceof HTMLButtonElement) {
				submitButton.disabled = false
				submitButton.textContent = 'Submit Information'
			}
			isSubmitting = false
		}
	} // End of async submit handler

	// --- Terms Checkbox Handler ---
	function handleTermsChange() {
		const currentTermsCheckbox = document.getElementById('terms-checkbox')
		const currentTermsError = document.getElementById('terms-error')
		if (
			currentTermsCheckbox instanceof HTMLInputElement &&
			currentTermsCheckbox.checked &&
			currentTermsError
		) {
			currentTermsError.classList.add('hidden')
		}
	}

	// --- Event Listener Setup Function ---
	function setupEventListeners() {
		const currentDataForm = document.getElementById('user-data-form')
		const currentTermsCheckbox = document.getElementById('terms-checkbox')

		if (currentDataForm instanceof HTMLFormElement) {
			currentDataForm.removeEventListener('submit', handleFormSubmit) // Prevent duplicates
			currentDataForm.addEventListener('submit', handleFormSubmit)
			console.log('Form submit listener attached.')
		} else {
			console.warn('User data form not found when attaching listener.')
		}

		if (currentTermsCheckbox) {
			currentTermsCheckbox.removeEventListener('change', handleTermsChange) // Prevent duplicates
			currentTermsCheckbox.addEventListener('change', handleTermsChange)
			console.log('Terms listener attached.')
		} else {
			console.warn('Terms checkbox not found when attaching listener.')
		}
	}

	// --- Main Setup Function ---
	function runSetup() {
		console.log('Running setup for GoogleSignInForm...')
		setupEventListeners()

		// Initialize Google Sign-In when the API is loaded
		// This will be triggered by the custom event from the Sign In page
		if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {
			console.log('Google API already available, initializing button...')
			initAndRenderGoogleButton()
		} else {
			console.log('Waiting for Google API to load...')
			document.addEventListener('google-api-loaded', initAndRenderGoogleButton)
		}
	}

	// Run on both initial load and after view transitions
	document.addEventListener('DOMContentLoaded', runSetup)
	document.addEventListener('astro:page-load', runSetup)
	document.addEventListener('astro:after-swap', runSetup)
</script>
